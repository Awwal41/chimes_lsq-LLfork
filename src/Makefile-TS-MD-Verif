##################################
# CHOOSE COMPILATION TYPE, SET FLAGS
##################################

# For linking to LAMMPS:

LINK2LMPS=no
LAMMPSDIR=/usr/gapps/polymers/lammps_borax/

# Compiling flags

MYFLAGS= -D VERBOSITY=1 -D FPENALTY_POWER=3.0 

# Other options:
#
# -D XFORMTYPE=LEFT 
# -D FORCECHECK=1 
# -D PESFORMAT=1 
# -D LOG_FORCE 
# -D LOG_PES

# Compilers

#CXX=mpiicc -std=c++11  -O3 -D USE_MPI 	# For MPI (intel  ). Run on slurm machines with: srun -n <#procs> house_md < run_md.in
#CXX=mpicc  -std=c++11  -g -D USE_MPI 	# For MPI (gnu    ). Run on slurm machines with: srun -n <#procs> house_md < run_md.in
#CXX=mpicxx -std=c++11 -O3 -D USE_MPI 	# For MPI (gnu/osx). Run on slurm machines with: srun -n <#procs> house_md < run_md.in
#CXX=icc -g				# Serial, for debugging
#CXX=icc -O3
#CXX=g++ -std=c++11 -g			# Serial, let compiler optimize to a very high level (see also -O2)
CXX=g++ -std=c++11 -O3			# Serial, let compiler optimize to a very high level (see also -O2)
#
# Below: Other debugging/optimiazation options
#
#CXX=g++ -g -Wall -Wextra -Wuninitialized -O1
#CXX=g++ -g # -Wall -Wextra
#CXX=icpc -fast -Wall


##################################
# MAKE THE LSQ CODE
##################################

CXX_LSQ_SRC=splines_ls.C functions.C Ewald.C ClassDefs.C Fcut.C Cluster.C
CXX_LSQ_HEADER=functions.h Fcut.h Cluster.h

house_lsq: $(CXX_LSQ_SRC) $(CXX_LSQ_HEADER)
	$(CXX) $(CXX_LSQ_SRC) $(CXX_LSQ_INCLUDES) -o house_lsq

clean_lsq:
	/bin/rm -f splines_ls.o functions.o Ewald.o

realclean_lsq: clean_lsq
	rm -f house_lsq 

build_tests_lsq:
	cd ../test_suite-lsq
	./generate_test_suite.sh
	cd -

##################################
# MAKE THE MD CODE
##################################


CXX_MD_SRC=splines_md.C functions.C Ewald.C ClassDefs.C Fcut.C Cluster.C
CXX_MD_HEADER=functions.h lmppath.h Fcut.h Cluster.h

FLAGLMP=-D LINK_LAMMPS
LAMMPS_LIB=$(LAMMPSDIR)/src/liblammps.a
LMP_COUPLE_LIB=$(LAMMPSDIR)/examples/COUPLE/library/libcouple.a
LIBS=/usr/lib64/libfftw3.a

house_md: $(CXX_MD_SRC) $(CXX_MD_HEADER)
ifeq ($(LINK2LMPS), yes)
	$(CXX) $(FLAGLMP) $(CXX_MD_SRC) $(LAMMPS_LIB) $(LMP_COUPLE_LIB) $(LIBS) -o house_md
else
	$(CXX) $(CXX_MD_SRC) -o house_md
endif

clean_md:
	/bin/rm -f *.o

realclean_md: clean_md
	/bin/rm -f house_md

build_tests_md:
	cd ../test_suite-md
	./generate_test_suite.sh
	cd -

##################################
# MAKE BOTH THE LSQ AND MD CODES
##################################


all:
	make house_md
	make house_lsq

tests:
	make all
	build_tests_lsq
	build_tests_md	
clean:
	 rm -f *.o

##################################
# Make Travis analyzer
##################################	

travis:
	make -C ../contrib/Travis

clean_travis:
	make clean -C ../contrib/Travis

##################################
# Make packmol initial configuration generator
##################################	

packmol:
	make -C ../contrib/packmol

clean_packmol:
	make clean -C ../contrib/packmol
