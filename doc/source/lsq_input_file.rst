Generating a ChIMES model
========================================================

This section assumes the goal of obtaining an atomistic ChIMES model from Kohn-Sham density functional theory (DFT) molecular dynamics (MD) generated reference data. However, ChIMES models can be fit to a broad variety of reference calculations. For additional information see:  **[CALL OUT SPECIFIC REFERENCES]**


At its simplest, ChIMES models are generated by per-atom force matching to DFT reference data, and at the highest level, the ChIMES Parameter Generator, ``chimes_lsq`` aims to solve the following over-determined matrix equation: 

.. math::
   :nowrap:

   \begin{equation}
   
      \mathrm{\mathbf{wAc}} = \mathrm{\mathbf{wb}_{DFT}},
   
   \end{equation}

where :math:`\mathrm{\mathbf{b}_{DFT}}` is the vector of DFT-generated per-atom force components, :math:`F^{\mathrm{DFT}}_{ijk}`, :math:`\mathrm{\mathbf{w}}` is a diagonal matrix of weights to be applied to the elements of :math:`\mathrm{\mathbf{b}_{DFT}}` and rows of :math:`\mathrm{\mathbf{A}}`, :math:`\mathrm{\mathbf{c}}` is the diagonal matrix of generated model parameters, and :math:`\mathrm{\mathbf{A}}` is the overdetermined ChIMES design matrix for which elements of :math:`\mathrm{\mathbf{A}}` are given by:


.. math::
   :nowrap:

   \begin{equation}
   
      M _{a,b} = \frac{\partial X _{a,\mathrm{ChIMES} \{c\}}}{\partial c_{b}}
   
   \end{equation}. 
   
   
Additional details are provided below in the following sections:

* :ref:`Essential workflow      <sec-workflow>`
* :ref:`Input files and options <sec-input_files>`
* :ref:`Running                 <sec-running>`
* :ref:`Output files             <sec-output_files>`
* :ref:`Caveats                 <sec-caveats>`

---------------

.. _sec-workflow:

Essential workflow
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The basic ChIMES model development workflow comprises 5 main steps, briefly outlined below. Note: 


1. Reference data preparation
****************************** 

* DFT-MD simulations are run for the target material over the target thermodynamic condition(s)

* Per-atom forces and optionally the system energy and stress tensor are extracted from the trajectory and saved in a "training trajectory" file, in a ``chimes_lsq`` compatible format
 
2. Hyperparameter selection
****************************** 

*  ChIMES model hyperparameters (e.g. bodiedness, polynomial orders, cutoffs, transformation function parameters, etc.) are specified in the ``chimes_lsq`` input file (e.g., typically named ``fm_setup.in``), along with the training trajectory file


3. Design matrix generation
****************************** 

* ``chimes_lsq`` is executed to produce the design matrix (``A.txt``), the vector of forces (and optionally energies and stresses) from DFT (``b.txt``), and other metadata files (e.g. ``params.header``, ``ff_groups.map``) 


4. Design matrix optimization
****************************** 

* ChIMES paramteters are generated via the ``chimes_lsq.py`` utility, which also allows for consideration of an optional weight 


5. Performing calculations with ChIMES
****************************************

* ChIMES calculations and simulations are performed through the `ChIMES Calculator <https://mybitbucket.llnl.gov/projects/CHMS/repos/chimes_calculator/browse>`_, which can be linked to a variety of simulation software packages

---------------

.. _sec-input_files:

Input files and options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**[THIS SECTION NEEDS TO BE WRITTEN]**

* Options/hyperparameters 
* Ancillary features
* Disucssion on weighting


**[ TO DO: Add links to external pages describing various things, e.g. ghost atoms ]**


Note: Asterisks (*) indicate options described in greater detail below

==================  =============================================    ====================================
Control  variables	Description                                       Value/Options/Notes
==================  =============================================    ====================================
``TRJFILE`` *       Training trajectory file(s)                      See below for details. 
``WRAPTRJ``         ``true``/``false``: Coorindate wrapping          Automatically disabled when ghost atoms (layers) are used.
``SPLITFI``         ``true``/``false``: {A,b}.txt file splitting     Should not be used unless DLARS/DLASSO solvers are used.
``NFRAMES``         Number of training frames                        Any integer > 0.
``NLAYERS``         Number of supercell ghost layers                 A value of 0 yields the original box. A value of 1 yields a single shell of replicated boxes around the original box (i.e. 27 boxes).
``FITCOUL`` *       ``true``/``false``: Fit/use charges              See below for details. 
``FITSTRS``         Whether/how to include stresses                  See below for details. 
``FITENER``         Whether/how to include energies                  See below for details. 
``FITEATM``         (DELETE) Boolean: Fit per-atom energies          (Defunct) N/A.
``FITPOVR``         (DELETE) Boolean: Fit ReaxFF overbonding         (Defunct) N/A.
``PAIRTYP``         (DELETE) Interaction type                        (Defunct) N/A.
``CHBTYPE`` *       Pair distance transformation type                See below for details. 
``USENEIG``         Neighbor list/distance convention                Auto-select algorithm (``true``) or use small-cell friendly method (``true SMALL``)
==================  =============================================    ====================================

Note: Asterisks (*) indicate options described in greater detail below

======================  =========================================== ====================================
Topology variables      Description                                 Value/Options/Notes
======================  =========================================== ====================================
``NATMTYP``             Number of atom types                        Number of unique atom types in trajectory.
``TYPEIDX``             Atom type index                             Integers, ranging from 1 to ``NATMTYP``. Values form a column below ``# TYPEIDX #``.
``ATM_TYP``             Atom type chemical symbol                   Any string. Chemical symbol for each unique atom type.  Values form a column below ``# ATM_TYP #``.
``ATMCHRG``             Atom type charge                            If ``FITCOUL`` is false: a partial atomic charge for each atom type. If ``FITCOUL`` is true: a positive or negative sign, to indicate how pair charge signs should be assigned.
``ATMMASS``             Atom type mass                              Floats > 0.
``EXCLUDE`` *           Interaction to excude/ignore                Sets of n-body ``ATM_TYP``s. Rarely used.
``PAIRIDX``             Pair type index                             Ascending integers from 1 to the number of unique atom pair types. Values form a column below ``# PAIRIDX #``.
``ATM_TYX``             ``ATM_TYP`` of atom X in pair ``PAIRIDX``   Used to define interaction pair types. Order does not matter.
``S_MINIM``             Inner cutoff for pair ``PAIRIDX``           Generally taken as slightly less than smallest distance sampled in DFT-MD trajectory.
``S_MAXIM``             Outer cutoff for pair ``PAIRIDX``           Should be small enough to prevent self-interaction across periodic boundaries.
``S_DELTA``             (DELETE) Soon to be defunct                 (Defunct) Requires dummy float.
``MORSE_LAMBDA``        (RENAME) ``CHEBTYPE`` variable              Morse-type lambda for Morse ``CHEBTYP``. Only used if ``# PAIRTYP #`` is ``CHEBYSHEV``. Generally set to location of first radial distribution peak for each pair type.
``USEOVERP``            (DELETE) ReaxFF overbonding variable        (Defunct) N/A.
``NIJBINS``             (DELETE) Defunct                            (Defunct) N/A.
``NIKBINS``             (DELETE) Defunct                            (Defunct) N/A.
``NJKBINS``             (DELETE) Defunct                            (Defunct) N/A.
``CHGCONS`` *           Charge fitting constraints                  See below for details. 
``SPECIAL XB MINIM`` *  Special manybody inner cutoffs              See below for details.
``SPECIAL XB MAXIM`` *  Special manybody outer cutoffs              See below for details.
``FCUTTYP`` *           Cutoff function style/parameters            See below for details.
``CUBSCLE``             (DELETE) A depricated ``CHBTYPE`` variable  N/A - Defunct
======================  =========================================== ====================================




Additional details on:
****************************************

``TRJFILE``
===========

This keyword provides the name of the simulation trajectory file. Files use a .xyzf format, which is like the standard .xyz format, with two exceptions: (1) the line after that specifying number of atoms will contain information on box dimensions and optionally stress tensor and system energy, and (2) each coordinate line has x, y, and z forces on the corresponding atom appended. Options are:
1. ``<any string>``: Tell the program to search for a single trajectory file name. 
2. ``MULTI <any string>``: Tell the program to expect multiple trajectory files. Here, <any string> is the name of a file structured like:

.. code-block:: bash

  <nfiles>
  <frames to read> path/to/file-1.xyzf
  <frames to read> path/to/file-2.xyzf
  ...
  <frames to read> path/to/file-n.xyzf
  
**[ ADD: DETAILS ON HIDDEN FUNCTIONALITY OF HIDDEN TRAJ_LIST LABELING ]**  
  

Note that,  when using the ``MULTI`` option, ``# NFRAMES #`` mustbe equal to the sum of  ``<frames to read>`` for each of the ``<nfiles>``.

Comment lines in trajectory file frames are formatted like:
``<box x-len> <box y-len> <box z-len> <s_xx> <s_xy> <s_xz> <s_yy> <s_yz> <s_zz> <energy>``
or, if the first word on the line is "NON-ORTHO", 
``NON-ORTHO <latvec-1_x> <latvec-1_y> <latvec-1_z> <latvec-2_x> <latvec-2_y> <latvec-2_z> <latvec-3_x> <latvec-3_y> <latvec-3_z> <s_xx> <s_xy> <s_xz> <s_yy> <s_yz> <s_zz> <energy>``,
where s_ab are the ab stress tensors and energy is the overall system energy, and latvec-i_a is the ath component of the ith lattice vector.
Note that stress tensors and energies are optional and thier inclusion is indicated by ``FITSTRS`` and ``FITENER`` in the ``fm_setup.in`` file. Additional details can be found in the corresponding sections below.


``FITCOUL``
===========

This keyword defines whether charges should be fit, or held fixed at user-defined values. Note that currently, functionality is only supported when ``FITCOUL`` is true, or when ``FITCOUL`` is false and all charges are zero.  If ``FITCOUL`` is false, but charges are non-zero, program will attempt to subtract charge contributions from forces.


``CBHTYP``
===========

This keyword defined the pair distance transformation method (i.e. for compatibility with the [-1,1] domain over which Chebyshev polynomials are defined). Currently, the only options are ``MORSE`` and ``DEFAULT`` (i.e. "direct" **[point reader to H2O paper or provide functional forms below]**). If ``MORSE`` is selected, meaningful values of ``MORSE_LAMBDA`` should be specified.


``EXCLUDE``
===========
(Ancillary support)

Interactions corresponding to specific atom triplets can be excluded from the fitting process by including the following lines above the ``NATMTYP`` entry in the input file, e.g. to exclude O-O-O and C-O-O 3-body interactions from the fit:

.. code-block:: bash

  EXCLUDE 3B INTERACTION: 2
  OOOOOO
  COCOOO
  

``CHGCONS``
===========

If the user desires to fit charges during the force matching process, they can either do so with no constraints (the default option), or by specifying n_atom_pairs -1 constraints. These constraints are added to the end of the input file, before ``# ENDFILE #``. Take water, as an example; here we have 3 pair types, OO, OH, and HH. We want to enforce that the sum of all charges is zero, and that H has half the charge of O, and we can do so by adding the following lines:

.. code-block:: bash

  CHARGE CONSTRAINTS:
  OO  HH  OH  1000.0  -4000.0  0.0     0.0
  OO  HH  OH  1000.0   4000.0  4000.0  0.0

The first line can be re-written as the equation: :math:`1000q_\mathrm{O}q_\mathrm{O} - 4000q_\mathrm{H}q_\mathrm{H} = 0`, and enforces the relationship that :math:`|q_\mathrm{O}| = 2|q_\mathrm{H}|`. The second line can be re-written as the equation: :math:`1000q_\mathrm{O}q_\mathrm{O}+ 4000q_\mathrm{H}q_\mathrm{H} + 4000q_\mathrm{O}q_\mathrm{H} = 0`, and enforces that the sign of :math:`q_\mathrm{OH}` needs to be opposite of :math:`q_\mathrm{HH}` and :math:`q_\mathrm{OO}` (i.e. negative), and the relationship :math:`|q_\mathrm{OH}| = 2|q_\mathrm{HH}|`. Note that each line needs entries for all atom pairs.


``SPECIAL XB MINIM``
======================

By default, many-body inner cutoffs are taken to be equivalent to the constituent 2-body inner cutoffs. One has the option of setting all inner cutoffs of a given bodiedness (e.g. 3-body) to an equivalent value by adding the following line to the end of the fm_setup,in file: 

.. code-block:: bash

  SPECIAL 3B S_MINIM: ALL 0.0

Otherwise, each cutoff can be specified separately through syntax similar to the following:

.. code-block:: bash

  SPECIAL 3B S_MINIM: SPECIFIC 4
  OOOOOO OO OO OO 2.00000 2.00000 2.00000
  OOOHOH OO OH OH 2.00000 0.80000 0.80000
  HHOHOH OH OH HH 0.80000 0.80000 1.00000
  HHHHHH HH HH HH 1.00000 1.00000 1.00000

Where the “4” is the number of cutoffs to be listed. Any many-body type for which a line is not provided will use the same ``S_MINIM`` as the 2-body interactions, where constituent pairs determine the cutoff. 


``SPECIAL XB MAXIM``
======================

By default, many-body outer cutoffs are taken to be equivalent to the constituent 2-body outer cutoffs. One has the option of setting all outer cutoffs of a given bodiedness (e.g. 3-body) to an equivalent value by adding the following line to the end of the fm_setup,in file: 

.. code-block:: bash

  SPECIAL 3B S_MAXIM: ALL 4.0

Otherwise, each cutoff can be specified separately through syntax similar to the following:

.. code-block:: bash

  SPECIAL 3B S_MAXIM: SPECIFIC 4
  CCCCCC CC CC CC 4.4 4.4 4.4
  COCOCC CC CO CO 4.4 4.0 4.0
  OOCOCO CO CO OO 4.0 4.0 6.5
  OOOOOO OO OO OO 6.5 6.5 6.5

Where the “4” is the number of cutoffs to be listed. Any many-body type for which a line is not provided will use the same ``S_MAXIM`` as the 2-body interactions, where constituent pairs determine the cutoff. 


``FCUTTYP``
===========

This keyword specifies Chebyshev potential cutoff function types and corresponding parameters. ``FCUTTYP`` should be specified on its own line, under ``# PAIRIDX #`` entries. Currently supported options include ``CUBIC`` and ``TERSOFF <float>``, where ``<float>`` gives the cutoff function kick-in distance as: :math:`r_\mathrm{cut} - <\mathrm{float}>r_\mathrm{cut}`, and should take on values between 0 and 1.

-----------------

.. _sec-running:

Running 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**[THIS SECTION NEEDS TO BE WRITTEN]**

* Running the actual fits (supported open source solvers too)
* Rules of thumb for running (don't use this phrasing)

.. _sec-output_files:

Output files
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**[THIS SECTION NEEDS TO BE WRITTEN]**

* Comprehensive description of the output file(s)


.. _sec-caveats:

Caveats
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**[THIS SECTION NEEDS TO BE WRITTEN]**

* Caveats (i.e. single atom energy)
